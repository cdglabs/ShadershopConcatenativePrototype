Code cleanup
  Should provisionalApply be an Apply?
  Reordering measuring algorithm still isn't quite right (try dragging a "start" apply)


Catch infinite loops with apply reordering and transclusion



Add parameter inspector
  axis (get rid of command click hack)
    time
  relative parameter to another parameter
  sweep



Things to think about
  Changing which parameter is the x-axis
    Confusing
    Might work with an animation to see the "rotation"?
  Feature: Scrubbing the x value and seeing the results (numbers)





Exercises
  Go through a shader and figure out the best visualization for each step



Animate
  Hovered link
  Every graph when you add a new link





Snapping to grid for scrubbing


Pan and zoom the main graph
  generalize canvas graph methods
  input x, y bounds
  output bounds







Visualization ideas
  "Bump" map (gradient's normal determines shading)
  Animated vector field (wind map)












Bret - Glen feedback (28 Feb 2014)
  Keep parameter spread visible but "on the grid" of the initial hover
    Red-blue to show increase/decrease on the parameter
  Play with a horizontal layout (Forth style?) to get more "code" on the screen
  For branching problem:
    Have "stops" and then drag output thumbnails onto parameter slots
  For visualizing sin(fract(x)):
    Show a sin wave and highlight the range of fract on the domain of sin, show where we're sampling from
    Scrubbing interface: as you move x-wise on the final graph, show where we sampled from on virgin graphs
    Show the y-to-x "rotation" as you go from fract to sin, while also showing the span of values
  Package functions with an outliner interface
    Maybe don't even need to explicitly expose parameters, instead just open the function up and link a parameter from the outside to the inside. This way you could even modify subcalls. But then when you change the prototype you're in disaster land...







Principles (in progress)
  Visualize every intermediate step of a computation.
  Construct a computation as a series of tranformations - calculator semantics
  Manipulate parameters as scrubbable geometry on the relevant dimension(s) of the visualization (direct manipulation).
  Build the visualizations within the environment (Contour Map, raymarcher, animated vector field, etc)



